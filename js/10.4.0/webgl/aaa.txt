function getOrCreateBuffer(coords) {
  // 객체 자체를 키로 사용
  if (bufferCache.has(coords)) {
    return bufferCache.get(coords);
  }
  
  const { instanceData, instanceCount } = createInstanceData(coords);
  const buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, instanceData, gl.STATIC_DRAW);
  
  const bufferInfo = { 
    buffer, 
    instanceCount, 
    size: instanceData.byteLength 
  };
  
  bufferCache.set(coords, bufferInfo);
  bufferInfoCount++;
  
  updateStats();
  
  return bufferInfo;
}
///
features.forEach(feature => {
  // 캐시에서 버퍼 가져오기
  const { buffer, instanceCount } = getOrCreateBuffer(feature.coordinates);
  
  // 버퍼 바인딩
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  bindInstanceAttributes(instanceAttributes, 1);
  
  // 스타일별로 렌더링
  feature.styles.forEach(style => {
    setLineUniforms(style);
    ext.drawElementsInstancedANGLE(gl.TRIANGLES, quadIndices.length, gl.UNSIGNED_SHORT, 0, instanceCount);
  });
});


// 좌표배열을 key, {buffer, instanceCount}를 value로 저장
const bufferCache = new WeakMap();
function getOrCreateGLBuffer(coords) {
  // 이미 캐시에 있으면 바로 반환
  if (bufferCache.has(coords)) {
    return bufferCache.get(coords);
  }
  // 새로 생성 (좌표 → 인스턴스 데이터 → 버퍼)
  const { instanceData, instanceCount } = createInstanceData(coords);
  const buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, instanceData, gl.STATIC_DRAW);

  // 캐시에 저장 (좌표 참조가 바뀌지 않는 한 재사용)
  bufferCache.set(coords, { buffer, instanceCount });
  return { buffer, instanceCount };
}


features.forEach(feature => {
  // 좌표배열을 기준으로 gl buffer/instanceCount 얻기
  const { buffer, instanceCount } = getOrCreateGLBuffer(feature.coordinates);
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  bindInstanceAttributes(instanceAttributes, 1);

  feature.styles.forEach(style => {
    setLineUniforms(style);
    ext.drawElementsInstancedANGLE(
      gl.TRIANGLES,
      quadIndices.length,
      gl.UNSIGNED_SHORT,
      0,
      instanceCount
    );
  });
});




// 1. 대표 스타일 개별 선언
const solid0 = {
  scale: 1,
  rotation: 0,
  strokeColor: [0.08, 0.8, 1.0, 1.0],
  strokeWidth: 12.0,
  strokeOffset: -5.0,
  strokeCap: 0.0,
  strokeJoin: 0.0,
  strokeMiterLimit: 10.0,
};

const dash0 = {
  scale: 1,
  rotation: 0,
  strokeColor: [1.0, 0.0, 0.0, 1.0],
  strokeWidth: 6.0,
  strokeOffset: 5.0,
  strokeCap: 4.0,
  strokeJoin: 0.0,
  strokeMiterLimit: 10.0,
  dashPattern: [20, 5, 20, 5],
  dashOffset: 0.0,
  useStrokePattern: false,
};

const pattern0 = {
  scale: 1,
  rotation: 0,
  strokeColor: [1.0, 1.0, 1.0, 1.0],
  strokeWidth: 12.0,
  strokeOffset: -5.0,
  strokeCap: 0.0,
  strokeJoin: 0.0,
  strokeMiterLimit: 10.0,
  useStrokePattern: true,
  strokePatternTextureSpacing: 20,
  strokePatternTextureStartOffset: 10,
  strokePatternTextureOffset: [0, 0],
};

/////
const features = [
  {
    coordinates: coordinates,
    styles: [
      solid0,                                 // 기본 solid 스타일
      { ...solid0, scale: 2 },                // scale만 다르게
      { ...solid0, rotation: Math.PI / 2 },   // rotation만 다르게
    ]
  },
  {
    coordinates: mirrorCoordinates(coordinates),
    styles: [
      dash0,                                  // 기본 dash 스타일
      { ...dash0, scale: 2 },                 // scale만 다르게
      pattern0,                               // 기본 pattern 스타일
      { ...pattern0, strokeWidth: 16, strokeColor: [0,1,1,1] }, // 두께, 색상만 다르게
    ]
  }
];


//////
features.forEach(feature => {
  const { instanceData, instanceCount } = createInstanceData(feature.coordinates);
  const instanceBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, instanceBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, instanceData, gl.STATIC_DRAW);

  gl.bindBuffer(gl.ARRAY_BUFFER, instanceBuffer);
  bindInstanceAttributes(instanceAttributes, 1);

  feature.styles.forEach(style => {
    setLineUniforms(style);
    ext.drawElementsInstancedANGLE(gl.TRIANGLES, quadIndices.length, gl.UNSIGNED_SHORT, 0, instanceCount);
  });
});


//////////
/////////;
//////////
function makeOrthoProjectionMatrix(centerX, centerY, bboxWidth, bboxHeight, viewWidth, viewHeight, scale = 1, rotation = 0) {
  const baseRes = Math.max(bboxWidth / viewWidth, bboxHeight / viewHeight);
  const sx = 2 / (viewWidth * baseRes * scale);
  const sy = 2 / (viewHeight * baseRes * scale);

  const cosR = Math.cos(rotation);
  const sinR = Math.sin(rotation);

  return new Float32Array([
    sx * cosR,  sx * sinR, 0, 0,
   -sy * sinR,  sy * cosR, 0, 0,
    0,          0,         1, 0,
   -centerX * sx * cosR + centerY * sy * sinR,
   -centerX * sx * sinR - centerY * sy * cosR,
    0, 1
  ]);
}

// 45도 회전 (라디안)
const rotation = Math.PI / 4;
const proj = makeOrthoProjectionMatrix(centerX, centerY, bboxWidth, bboxHeight, viewWidth, viewHeight, 1, rotation);

function createProjectionMatrix(scale, rotation = 0) {
  return makeOrthoProjectionMatrix((minLon + maxLon) / 2, (minLat + maxLat) / 2, maxLon - minLon, maxLat - minLat, canvas.width, canvas.height, scale, rotation);
}

const lons = coordinates.map(c => c[0]);
const lats = coordinates.map(c => c[1]);
const minLon = Math.min(...lons), maxLon = Math.max(...lons);
const minLat = Math.min(...lats), maxLat = Math.max(...lats);

function makeOrthoProjectionMatrix(centerX, centerY, bboxWidth, bboxHeight, viewWidth, viewHeight, scale = 1) {
  const baseRes = Math.max(bboxWidth / viewWidth, bboxHeight / viewHeight);
  const sx = 2 / (viewWidth * baseRes * scale);
  const sy = 2 / (viewHeight * baseRes * scale);
  return new Float32Array([
    sx, 0, 0, 0,
    0, sy, 0, 0,
    0, 0, 1, 0,
    -centerX * sx, -centerY * sy, 0, 1
  ]);
}

const projectionMatrix = makeOrthoProjectionMatrix((minLon + maxLon) / 2, (minLat + maxLat) / 2, maxLon - minLon, maxLat - minLat, canvas.width, canvas.height, 1);

  gl.uniformMatrix4fv(gl.getUniformLocation(program, "u_projectionMatrix"), false, matrix);
  // ...draw
}

document.getElementById('zoom-in').onclick = () => { scale *= 0.5; updateMatrixAndRedraw(); };
document.getElementById('zoom-out').onclick = () => { scale *= 2; updateMatrixAndRedraw(); };

// 리사이즈 대응 (optional)
window.addEventListener('resize', () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  updateMatrixAndRedraw();
});

updateMatrixAndRedraw(); // 최초 렌더링

// 4. draw 함수에서 사용
function updateMatrixAndRedraw() {
  const matrix = makeOrthoProjectionMatrix(centerX, centerY, minLon, minLat, maxLon, maxLat, width, height, scale);
  gl.uniformMatrix4fv(gl.getUniformLocation(program, "u_projectionMatrix"), false, matrix);
  // ... draw 코드는 기존 그대로
}

// 5. zoom in/out 버튼 (scale 배율)
document.getElementById('zoom-in').onclick = () => { scale *= 0.5; updateMatrixAndRedraw(); };
document.getElementById('zoom-out').onclick = () => { scale *= 2; updateMatrixAndRedraw(); };

updateMatrixAndRedraw();
