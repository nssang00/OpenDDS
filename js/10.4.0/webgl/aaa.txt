
const lons = coordinates.map(c => c[0]);
const lats = coordinates.map(c => c[1]);
const minLon = Math.min(...lons), maxLon = Math.max(...lons);
const minLat = Math.min(...lats), maxLat = Math.max(...lats);
const centerX = (minLon + maxLon) / 2;
const centerY = (minLat + maxLat) / 2;
const width = canvas.width, height = canvas.height;

// 3. 심플 프로젝션 함수 (scale만 받아서)
function makeOrthoProjectionMatrix(centerX, centerY, minX, minY, maxX, maxY, width, height, scale) {
  // "데이터 전체가 딱 맞게"의 기본 배율
  const bboxWidth = maxX - minX;
  const bboxHeight = maxY - minY;
  const baseRes = Math.max(bboxWidth / width, bboxHeight / height);
  const sx = 2 / (width * baseRes * scale);
  const sy = 2 / (height * baseRes * scale);
  return new Float32Array([
    sx, 0, 0, 0,
    0, sy, 0, 0,
    0, 0, 1, 0,
    -centerX * sx, -centerY * sy, 0, 1
  ]);
}

// 4. draw 함수에서 사용
function updateMatrixAndRedraw() {
  const matrix = makeOrthoProjectionMatrix(centerX, centerY, minLon, minLat, maxLon, maxLat, width, height, scale);
  gl.uniformMatrix4fv(gl.getUniformLocation(program, "u_projectionMatrix"), false, matrix);
  // ... draw 코드는 기존 그대로
}

// 5. zoom in/out 버튼 (scale 배율)
document.getElementById('zoom-in').onclick = () => { scale *= 0.5; updateMatrixAndRedraw(); };
document.getElementById('zoom-out').onclick = () => { scale *= 2; updateMatrixAndRedraw(); };

updateMatrixAndRedraw();
