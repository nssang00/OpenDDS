function makeOrthoProjectionMatrix(centerX, centerY, bboxWidth, bboxHeight, viewWidth, viewHeight, scale = 1, rotation = 0) {
  const baseRes = Math.max(bboxWidth / viewWidth, bboxHeight / viewHeight);
  const sx = 2 / (viewWidth * baseRes * scale);
  const sy = 2 / (viewHeight * baseRes * scale);

  const cosR = Math.cos(rotation);
  const sinR = Math.sin(rotation);

  return new Float32Array([
    sx * cosR,  sx * sinR, 0, 0,
   -sy * sinR,  sy * cosR, 0, 0,
    0,          0,         1, 0,
   -centerX * sx * cosR + centerY * sy * sinR,
   -centerX * sx * sinR - centerY * sy * cosR,
    0, 1
  ]);
}

// 45도 회전 (라디안)
const rotation = Math.PI / 4;
const proj = makeOrthoProjectionMatrix(centerX, centerY, bboxWidth, bboxHeight, viewWidth, viewHeight, 1, rotation);

function createProjectionMatrix(scale, rotation = 0) {
  return makeOrthoProjectionMatrix((minLon + maxLon) / 2, (minLat + maxLat) / 2, maxLon - minLon, maxLat - minLat, canvas.width, canvas.height, scale, rotation);
}

const lons = coordinates.map(c => c[0]);
const lats = coordinates.map(c => c[1]);
const minLon = Math.min(...lons), maxLon = Math.max(...lons);
const minLat = Math.min(...lats), maxLat = Math.max(...lats);

function makeOrthoProjectionMatrix(centerX, centerY, bboxWidth, bboxHeight, viewWidth, viewHeight, scale = 1) {
  const baseRes = Math.max(bboxWidth / viewWidth, bboxHeight / viewHeight);
  const sx = 2 / (viewWidth * baseRes * scale);
  const sy = 2 / (viewHeight * baseRes * scale);
  return new Float32Array([
    sx, 0, 0, 0,
    0, sy, 0, 0,
    0, 0, 1, 0,
    -centerX * sx, -centerY * sy, 0, 1
  ]);
}

const projectionMatrix = makeOrthoProjectionMatrix((minLon + maxLon) / 2, (minLat + maxLat) / 2, maxLon - minLon, maxLat - minLat, canvas.width, canvas.height, 1);

  gl.uniformMatrix4fv(gl.getUniformLocation(program, "u_projectionMatrix"), false, matrix);
  // ...draw
}

document.getElementById('zoom-in').onclick = () => { scale *= 0.5; updateMatrixAndRedraw(); };
document.getElementById('zoom-out').onclick = () => { scale *= 2; updateMatrixAndRedraw(); };

// 리사이즈 대응 (optional)
window.addEventListener('resize', () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  updateMatrixAndRedraw();
});

updateMatrixAndRedraw(); // 최초 렌더링

// 4. draw 함수에서 사용
function updateMatrixAndRedraw() {
  const matrix = makeOrthoProjectionMatrix(centerX, centerY, minLon, minLat, maxLon, maxLat, width, height, scale);
  gl.uniformMatrix4fv(gl.getUniformLocation(program, "u_projectionMatrix"), false, matrix);
  // ... draw 코드는 기존 그대로
}

// 5. zoom in/out 버튼 (scale 배율)
document.getElementById('zoom-in').onclick = () => { scale *= 0.5; updateMatrixAndRedraw(); };
document.getElementById('zoom-out').onclick = () => { scale *= 2; updateMatrixAndRedraw(); };

updateMatrixAndRedraw();
