// --- 1. FNV-1a 해시 함수 (JS 문자열 입력) ---
function fnv1a(str) {
  let hash = 0x811c9dc5;
  for (let i = 0, l = str.length; i < l; i++) {
    hash ^= str.charCodeAt(i);
    hash = (hash * 0x01000193) >>> 0;
  }
  return hash.toString(16);
}

// --- 2. feature(geometry) + filter 직렬화 ---
function serializeKey(featureObj, filterObj) {
  // feature는 id (고유 문자열) 사용 권장, 없으면 전체 serialize
  const featureKey = featureObj.id || JSON.stringify(featureObj); 
  const filterKey = JSON.stringify(filterObj); // filter가 배열/객체라도 안전!
  return `${featureKey}::${filterKey}`;
}

// --- 3. buffer 캐시 키 생성 ---
function getBufferCacheKey(feature, filter) {
  return fnv1a(serializeKey(feature, filter));
}

// --- 4. 실제 buffer 캐시 (Map or WeakMap) ---
const bufferCache = new Map();

// --- 5. 버퍼 생성 및 캐시 로직 ---
function getOrCreateWebGLBuffer(gl, feature, filter, createWebGLBufferFunc) {
  const cacheKey = getBufferCacheKey(feature, filter);
  if (bufferCache.has(cacheKey)) {
    return bufferCache.get(cacheKey);
  }
  // filter를 적용해서 실제 필요한 좌표 추출 등 로직 작성
  const buffer = createWebGLBufferFunc(gl, feature, filter);
  bufferCache.set(cacheKey, buffer);
  return buffer;
}

// --- 6. 예시: buffer 생성 함수 (구현 상황에 맞게 작성) ---
function createWebGLBufferFunc(gl, feature, filter) {
  // 예시: filter 적용 후 좌표/geometry 데이터 준비
  const coords = feature.coords.filter(f => applyFilterLogic(f, filter));
  // WebGLBuffer 생성
  const buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(coords.flat()), gl.STATIC_DRAW);
  return buffer;
}

// --- 7. 실제 사용 예시 ---
// 가정: feature = {id: "tile_10_10", coords: [...]}
const feature = { id: "tile_10_10", coords: [...] };
const filter = ['>', ['get', 'pop_max'], 5_000_000];

// WebGL context(gl) 전달 필요!
const buffer = getOrCreateWebGLBuffer(gl, feature, filter, createWebGLBufferFunc);

// 이 buffer를 WebGL draw에 사용!
